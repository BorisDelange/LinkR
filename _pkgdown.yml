title: LinkR
url: https://interhop.frama.io/linkr/linkr/
template:
  bootstrap: 5
  bslib:
    font-size-base: 1rem;
    h1-font-size: 2rem;
    h2-font-size: 1.8rem;
    h3-font-size: 1.5rem;
    headings-margin-bottom: 2rem;
  includes:
    before_navbar: |
      <link rel = "stylesheet", href = "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.3.1/styles/tomorrow-night-blue.min.css">
      <style>
      body {
        font-size: 1rem;
      }
      body .page-header {
        min-height: 75px !important;
      }
      pre {
        background-color: transparent;
        border: none;
      }
      </style>
      <div class="language-selector">
        <select id="language" class="form-control" style="margin:0px 20px 0px 20px; width:50px;" onchange="change_language(); change_page();">
          <option value="en">EN</option>
          <option value="fr">FR</option>
        </select>
      </div>
    after_body: |
      <script>
        //var languageChangedEvent = new Event('languageChanged');
      
        function change_display(id, display_style) {
          var element = document.getElementById(id);
          if (element) {
            element.style.display = display_style;
          }
        }
        
        function change_language() {
          var lang = document.getElementById("language").value || "en";
      
          var navItems = document.querySelectorAll("#navbar .nav-link");
          navItems.forEach(function(item) {
            switch(item.textContent) {
              case "Tutoriels":
              //case "": // Add other pages this way
                item.style.display = lang === "fr" ? "block" : "none";
                break;
              case "Tutorials":
              //case "": // Add other pages this way
                item.style.display = lang === "en" ? "block" : "none";
                break;
            }
            
            if (item.textContent === "Reference" || item.textContent === "Fonctions") {
              item.textContent = lang === "fr" ? "Fonctions" : "Reference";
            }
            
            const elements = document.querySelectorAll('.navbar-brand');
            const home_url = Array.from(elements).find(el => el.textContent.trim() === 'LinkR');
            if (home_url) {
              alert("test")
              if (lang == "fr" && !home_url.href.includes("fr_index.html")) {
                home_url.href = home_url.href.replace("index.html", "fr_index.html");
              } else if (lang == "en") {
                home_url.href = home_url.href.replace("fr_index.html", "index.html");
              }
            }
          });
        }
        
        function change_page() {
          var lang = document.getElementById("language").value;
          var current_url = window.location.href;
          if (!current_url.includes("reference") && (current_url.includes("index.html") || current_url == "https://interhop.frama.io/linkr/linkr/")){
            if (lang == "en") current_url = current_url.replace("fr_", "");
            else if (lang == "fr" && !current_url.includes("fr_")) current_url = current_url.replace("index.html", "fr_index.html");
          }
          else {
            if (!current_url.includes(lang + "_")){
              if (lang == "en" && current_url.includes("fr_")) current_url = current_url.replace("fr_", "en_");
              else if (lang == "fr" && current_url.includes("en_")) current_url = current_url.replace("en_", "fr_");
            }
          }
          window.location.href = current_url;
        }
        
        function initialize_language_selector() {
          var selected_language = document.getElementById("language");
          if (selected_language) {
            var selectedLanguage = localStorage.getItem("selectedLanguage");
            if (selectedLanguage) {
              selected_language.value = selectedLanguage;
            }
            change_language(selectedLanguage);
          }
        }
        
        document.addEventListener("DOMContentLoaded", function() {
          
          var selected_language = document.getElementById("language");
          if (selected_language) {
            selected_language.addEventListener("change", function() {
              localStorage.setItem("selectedLanguage", this.value);
              change_language(this.value);
            });
          }
          
          window.addEventListener('storage', function(e) {
            if (e.key === 'selectedLanguage') {
              initialize_language_selector();
            }
          });

          initialize_language_selector();
          
          var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
              if (mutation.addedNodes.length > 0) {
                document.querySelectorAll('.code_highlight:not(.hljs)').forEach((block) => {
                  hljs.highlightElement(block);
                  block.classList.add('hljs');
                });
              }
            });
          });
  
          var target = document.querySelector('body');
          observer.observe(target, { childList: true, subtree: true });
        });
      </script>
      <script src = "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.3.1/highlight.min.js">
navbar:
  structure:
    left:  [reference, en_tutorials, fr_tutorials]
    right: [search]
  components:
    en_tutorials:
      text: "Tutorials"
      menu:
      - text: "Import data"
        href: "articles/en_import_data.html"
    fr_tutorials:
      text: "Tutoriels"
      menu:
      - text: "Importer des donn√©es"
        href: "articles/fr_import_data.html"
reference:
- title: "Run the app"
  contents:
  - linkr
- title: "Import & manage data"
  desc: "Functions used to import data into LinkR & manage data from LinkR"
  contents: 
  - add_persons_to_subset
  - add_vocabulary_concept
  - get_vocabulary_concept
  - import_dataset
  - import_vocabulary_table
  - remove_persons_from_subset
  - run_dataset_code
- title: "Shiny app server functions"
  desc: "Functions used in Shiny server function"
  contents:
  - add_log_entry
  - add_settings_new_data
  - capture_python_output
  - coalesce2
  - convert_tibble_to_list
  - db_create_table
  - db_create_tables
  - delete_element
  - execute_settings_code
  - get_authorized_data
  - get_col_names
  - get_db
  - get_last_row
  - get_remote_db
  - insert_default_data
  - is_integer_or_integer64
  - load_database
  - monitor_perf
  - now
  - prepare_data_datatable
  - report_bug
  - resize_and_pad_image
  - save_settings_code
  - save_settings_datatable_updates
  - save_settings_options
  - show_or_hide_cards
  - update_r
  - update_settings_datatable
- title: "Shiny app UI functions"
  desc: "Functions used in Shiny UI function"
  contents:
  - forbidden_card
  - format_datetime
  - get_singular
  - get_plural
  - make_card
  - make_combobox
  - make_dropdown
  - make_layout
  - make_page
  - make_people_picker
  - make_shiny_ace_card
  - make_textfield
  - make_toggle
  - render_datatable
  - render_settings_creation_card
  - render_settings_datatable_card
  - render_settings_default_elements
  - show_message_bar
