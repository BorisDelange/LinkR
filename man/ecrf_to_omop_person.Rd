% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_ecrf_to_omop.R
\name{ecrf_to_omop_person}
\alias{ecrf_to_omop_person}
\title{Convert eCRF patient data to OMOP CDM Person format}
\usage{
ecrf_to_omop_person(
  data,
  person_id_col,
  gender_col = NULL,
  gender_concepts = NULL,
  birth_datetime_col = NULL
)
}
\arguments{
\item{data}{A dataframe or tibble containing source patient data from the eCRF}

\item{person_id_col}{Name of the column containing the patient identifier (character string)}

\item{gender_col}{Name of the column containing the patient's gender (character string)}

\item{gender_concepts}{A named vector where names are the gender values in the source data
and values are the corresponding OMOP concept_ids from the ATHENA vocabulary.
For example: c("M" = 8507, "F" = 8532, "O" = 0)}

\item{birth_datetime_col}{Name of the column containing the birth date (character string)}
}
\value{
A tibble conforming to the structure of the PERSON table in OMOP CDM v5.4
}
\description{
Converts patient data from an eCRF (electronic Case Report Form) source format to the 
OMOP CDM Person format (version 5.4). The function creates a unique identifier for each 
patient and handles demographic data such as gender and birth date. If duplicate records 
are detected for the same patient (different values for gender or birth date), the function 
keeps the first value encountered and issues a warning.
}
\examples{
# Create sample eCRF data
ecrf_patient_data <- tibble::tibble(
  patient_id = c("P001", "P002", "P001"),
  hospital_id = c("H01", "H01", "H01"),
  visit_id = c("V0001", "V0023", "V0012"),
  gender = c("M", "F", "M"),
  age = c(67, 53, 67),
  admission_date = as.Date(c("2024-01-05", "2024-01-07", "2024-03-12")),
  birth_date = as.Date(c("1957-01-05", "1971-01-07", "1957-03-12"))
)

# Create a gender mapping
gender_map <- c("M" = 8507, "F" = 8532, "O" = 0)

# Convert the data
person_table <- ecrf_to_omop_person(
  data = ecrf_patient_data,
  person_id_col = "patient_id",
  gender_col = "gender",
  gender_concepts = gender_map,
  birth_datetime_col = "birth_date"
)

# View the resulting OMOP Person table
print(person_table)
# Output will include a warning about patient P001 having conflicting demographic info,
# and will contain the following 2 rows (simplified):
# # A tibble: 2 × 18
#   person_id gender_concept_id year_of_birth month_of_birth day_of_birth
#       <int>            <int>         <int>          <int>        <int>
# 1         1             8507          1957              1            5
# 2         2             8532          1971              1            7
# # … with 13 more variables including birth_datetime, person_source_value, etc.

}
